What you will find in this article:
* Description of [IPCAD](https://lionet.info/ipcad/) daemon that pretends as a Cisco router and provides aggregated network statistic
* Example of materialized views in ClickHouse database
* [ipcad2ch](https://github.com/inkuber/ipcad2ch) utility that will help you to organize accounting of network traffic

# How I saved network statistics from IPCAD to ClickHouse 
In the era of broadband Internet there are not so much sense to account network traffic. May be just a small ISP by some reason not taken by the big players. Ifrastracture of this kind of ISP I proudly supporting. Technological stack is following:

* FreeBSD server as router that aggregate network statistic in IPCAD daemon
* FreeBSD server with self made billing on PHP and PostgreSQL database. Aggregates are saved in DB, detail statistic in zipped ipcad text files

This configuration was enoght for narrow network channels of 2000th but now in the epoch of gigabites become very bad and everything start to shamelessly slow down. It's time to do something...

If something start to slow down, what we need? Right, something that could not be slow. As everybody knows ClickHouse is never slow then we install it.

<details>
  <summary>ClickHouse  - это ...</summary>
  ClickHouse is a database, created in the bowels of russian company Yandex. Most interesting thing in this database is that it is column db, i.e. store datum of tables not by rows how it doing relation databases but by columns. Roughly saying, values of one column stored in one file. This gives advantages in processing data from several columns not reading everything from disk by rows.
</details>

Основным функционалом приложения являются отчеты о потреблении услуги:

* Кто из абонентов сколько потребил за отчетный период и сколько нужно за это попросить денег.
* Посмотреть сколько потребил услуги абонент в определенный день, час и минуту с построением красивых графиков.
* Выдать детальную информацию на запрос абонента, куда он ходил за запрошенный интервал времени.

Исходя из требований нам необходимо сохранять получаемую информацию из формата IPCAD как есть и строить некоторые агрегаты по времени. Вроде не сложно...

# Формат IPCAD

IPCAD (Cisco IP accounting simulator) - демон, считающий проходящий мимо маршрутизатора трафик и строящий агрегаты количества пакетов и объема трафика в памяти по кортежу:

* IP источника
* Порт источника
* IP приемника
* Порт приемника
* Протокол
* Интерфейс

Данные можно получить запросив их через RSH

```
#!/bin/sh
RSH=`which rsh`
IP=<IP адрес маршрутизатора>
FILE=Куда сохраняем

# сбросить статистику до контрольной точки
$RSH -l root $IP clear ip accounting > /dev/null

# показать статистику сохраненную в контрольных точках
$RSH -l root $IP show ip accounting checkpoint > $FILE
```
Получим вывод в виде:

```
   Source           Destination    Packets        Bytes  SrcPt DstPt Proto   IF
 188.218.189.188  188.138.119.98         1           88     83 28088    18  em1
 188.218.189.188  188.138.119.98         1           88     83 12038    18  em1
 108.232.38.113   188.218.189.198        1           80    883 28818     8  em1
```
Вот эти данные мы и хотим сохранять не по старинке, в zip архивах, а в модном и молодежном ClickHouse.

# Структура таблиц в ClickHouse

Одной из самых могучих функций ClickHouse являются материализованные представления. Это таблицы, которые сами обновляются из данных, сохранненных в других таблицах. Т.е. мы можем делать инсерты в таблицу детального трафика, а агрегаты будут строиться сами по себе по заданным в представлениях правилах.

<spoiler title="Табличка детального трафика">
```sql
CREATE TABLE IF NOT EXISTS details
(
    collected DateTime,
    user_id String,
    dir Enum8('unknown' = 0, 'in' = 1, 'out' = 2),
    class Enum8('unknown' = 0, 'local' = 1, 'peering' = 2, 'internet' = 3, 'multicast' = 4),
    src_ip UInt32,
    src_port UInt16,
    dst_ip UInt32,
    dst_port UInt16,
    packets UInt16,
    bytes UInt32,
    proto UInt8
)
ENGINE = MergeTree
PARTITION BY toYYYYMMDD(collected)
ORDER BY (collected, user_id, dir, class, src_ip, dst_ip, proto)
SETTINGS index_granularity = 8192
```
</spoiler>

В табличке детального трафика мы сохраняем структуру данных IPCAD, добавляя временную метку и несколько полей для классификации записей по коду абонента, направлению и классу трафика. Теперь построим материализованные представления:

<spoiler title="Табличка агрегатов по дням">
CREATE MATERIALIZED VIEW IF NOT EXISTS daily
(
    date Date,
    user_id String,
    class Enum8('unknown' = 0, 'local' = 1, 'peering' = 2, 'internet' = 3, 'multicast' = 4),
    dir Enum8('unknown' = 0, 'in' = 1, 'out' = 2),
    bytes AggregateFunction(sum, UInt32)
)
ENGINE = AggregatingMergeTree()
PARTITION BY toYYYYMM(date)
ORDER BY (date, user_id, class, dir)
SETTINGS index_granularity = 8192 AS
SELECT
    toDate(collected) AS date,
    user_id,
    class,
    dir,
    sumState(bytes) AS bytes
FROM details
GROUP BY
    toDate(collected),
    user_id,
    class,
    dir
</spoiler>

<spoiler title="Таблицы агрегатов по часам и минутам">
CREATE MATERIALIZED VIEW IF NOT EXISTS hourly
(
    date DateTime,
    user_id String,
    class Enum8('unknown' = 0, 'local' = 1, 'peering' = 2, 'internet' = 3, 'multicast' = 4),
    dir Enum8('unknown' = 0, 'in' = 1, 'out' = 2),
    bytes AggregateFunction(sum, UInt32)
)
ENGINE = AggregatingMergeTree()
PARTITION BY toYYYYMM(date)
ORDER BY (date, user_id, class, dir)
SETTINGS index_granularity = 8192 AS
SELECT
    toStartOfHour(collected) AS date,
    user_id,
    class,
    dir,
    sumState(bytes) AS bytes
FROM details
GROUP BY
    toStartOfHour(collected),
    user_id,
    class,
    dir;

CREATE MATERIALIZED VIEW IF NOT EXISTS minutely
(
    date DateTime,
    user_id String,
    class Enum8('unknown' = 0, 'local' = 1, 'peering' = 2, 'internet' = 3, 'multicast' = 4),
    dir Enum8('unknown' = 0, 'in' = 1, 'out' = 2),
    bytes AggregateFunction(sum, UInt32)
)
ENGINE = AggregatingMergeTree()
PARTITION BY toYYYYMM(date)
ORDER BY (date, user_id, class, dir)
SETTINGS index_granularity = 8192 AS
SELECT
    toStartOfMinute(collected) AS date,
    user_id,
    class,
    dir,
    sumState(bytes) AS bytes
FROM details
GROUP BY
    toStartOfMinute(collected),
    user_id,
    class,
    dir;
</spoiler>

Вжух и агрегаты сами считаются при добавлении записей в таблицу детального трафика. Это магия!

# Сохраняем в ClickHouse
Теперь осталось самое легкое, сделать тулзу. Рисуем два овала, потом дорисовываем всю остальную сову. Взял любимый Golang, распарсил, классифицировал и сохранил. Получилась простенькая программка, которую выложил на github.

* [ipcad2ch](https://github.com/inkuber/ipcad2ch)

## Способ применения
Помните в начале был скрипт съема статистики с IPCAD, давайте его немного изменим:
```
#!/bin/sh
RSH=`which rsh`
IP=<IP адрес маршрутизатора>
FILE=Куда сохраняем

# сбросить статистику до контрольной точки
$RSH -l root $IP clear ip accounting > /dev/null

# показать статистику сохраненную в контрольных точках
$RSH -l root $IP show ip accounting checkpoint | ipcad2sh > $FILE
```
В разрез сохранения в файл, добавили нашу программу, которая читает данные из стандартного ввода, сохраняет их в ClickHouse и печатает все в стандартный вывод. Таким образом мы можем сразу начать сохранять статистику, не меняя работу легаси кода. Осталось собрать достаточно статистики и плавно перейти на новый источник данных. У меня архивная статистика хранится в zip файлах и ее тоже можно загнать через утилиту в БД, что я за кадром и сделал.

## Опыт применения
